# frozen_string_literal: true
n = gets.to_i

#  sum of first n numbers
def Sum_Of_First_n_Numbers(n)
  sum = 0
  for i in 1..n
    sum = sum + i
  end
  return sum
end

#while variant
def Sum_Of_First_N_Numbers(n)
  sum = 0
  i = 1
  while i <= n
    sum = sum + i
    i = i + 1
  end
  return sum
end


# Factorial of n
def n_Factorial(n)
  # if n < 0
  # return -1
  #else
    fact = 1
    for i in 1..n
      fact = fact * i
    end
    return fact
end

#while variant
n = 7
i = 1
res = 1
while i <= n
    res = res * i
    i = i + 1
end
puts res

#GCD of two numbers

a = 189
b = 45
if a < b
    temp = a
    a = b
    b = temp
end
while b != 0
    temp = a
    a = b
    b = temp % b  # Update a to b and b to a % b
end
puts a


#Reverse a Number

n = 135187
reversed_number = 0
while n > 0
    last_digit = n % 10
    reversed_number = reversed_number * 10 + last_digit
    n = n/10
end
puts reversed_number


#Check if a number is prime

def is_Prime(n)
  if n < 2
    return false
  end
  for i in 2..n / 2
    if n % i == 0
      return false
    end
  end
  return true
end

#while variant

n = 23
if n < 2
    puts false
end
i = 2
isprime = true
while i < n
    if n % i == 0
        isprime = false
    end
    i = i + 1
end
puts isprime


#CHeck If a number is a palindrome

n = 123321
og = n
reversed_number = 0
while n > 0
    last_digit = n % 10
    reversed_number = reversed_number * 10 + last_digit
    n = n/10
end

puts og == reversed_number




#Largest Digit

n = 57318
largest = 0
while n > 0
    digit = n % 10
    if digit > largest
        largest = digit
    end
    n = n/10
end
puts largest


#Sum Of Digits

n = 1973651
sum = 0
while n > 0
    digit = n % 10
    sum = sum + digit
    n = n / 10
end
puts sum


#Multiplication Table

def Multiplication_Table(n)
  for i in 1..10
    puts i * n
  end
  return nil
end

#while variant

n = 12
i = 1
while i <= 10
    puts i * n
    i = i + 1
end


#N-th Fibonacci Number

def fibonacci(n)
  if n <= 1
    return n
  end
    a = 0
    b = 1
  (2..n).each do
        a, b = b, a + b
      end
  return b
end

#while variant

n = 12
if n <= 1
    puts n
end
a = 0
b = 1
i = 2
while i <= n
    c = a
    a = b
    b = c + b
    i = i + 1
end
puts b

